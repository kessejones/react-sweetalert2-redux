'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sweetalert = require('sweetalert2');

var _sweetalert2 = _interopRequireDefault(_sweetalert);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactSweetAlert2 = function (_Component) {
    _inherits(ReactSweetAlert2, _Component);

    function ReactSweetAlert2(props, context) {
        _classCallCheck(this, ReactSweetAlert2);

        return _possibleConstructorReturn(this, (ReactSweetAlert2.__proto__ || Object.getPrototypeOf(ReactSweetAlert2)).call(this, props, context));
    }

    _createClass(ReactSweetAlert2, [{
        key: 'setupSwal',
        value: function setupSwal(props) {
            var show = props.show,
                showLoading = props.showLoading,
                onConfirm = props.onConfirm,
                restProps = _objectWithoutProperties(props, ['show', 'showLoading', 'onConfirm']);

            if (show) {
                (0, _sweetalert2.default)({
                    ...restProps
                }).then(function (result) {
                    if (onConfirm != null) {
                        onConfirm(result);
                    }
                }).catch();
                if (showLoading) {
                    _sweetalert2.default.showLoading();
                }
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps != this.props) this.setupSwal(nextProps);
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.setupSwal(this.props);
        }
    }, {
        key: 'render',
        value: function render() {
            return null;
        }
    }]);

    return ReactSweetAlert2;
}(_react.Component);

ReactSweetAlert2.propsTypes = {
    show: _propTypes2.default.bool.isRequired,
    title: _propTypes2.default.string,
    titleText: _propTypes2.default.string,
    html: _propTypes2.default.string,
    text: _propTypes2.default.string,
    type: _propTypes2.default.oneOf(['warning', 'error', 'success', 'info', 'input']),
    footer: _propTypes2.default.string,
    backdrop: _propTypes2.default.bool.isRequired,
    toast: _propTypes2.default.bool.isRequired,
    target: _propTypes2.default.string.isRequired,
    input: _propTypes2.default.oneOf(['text', 'email', 'password', 'number', 'tel', 'range', 'textarea', 'select', 'radio', 'checkbox', 'file', 'url']),
    width: _propTypes2.default.number,
    padding: _propTypes2.default.number,
    background: _propTypes2.default.string,
    position: _propTypes2.default.oneOf(['center', 'top', 'top-start', 'top-end', 'center-start', 'center-end', 'bottom', 'bottom-start', 'bottom-end']),
    grow: _propTypes2.default.oneOf(['row', 'column', 'fullscreen', false]),
    customClass: _propTypes2.default.string,
    timer: _propTypes2.default.number,
    animation: _propTypes2.default.bool.isRequired,
    heightAuto: _propTypes2.default.bool.isRequired,
    allowOutsideClick: _propTypes2.default.bool.isRequired,
    allowEscapeKey: _propTypes2.default.bool.isRequired,
    allowEnterKey: _propTypes2.default.bool.isRequired,
    stopKeydownPropagation: _propTypes2.default.bool.isRequired,
    keydownListenerCapture: _propTypes2.default.bool.isRequired,
    showConfirmButton: _propTypes2.default.bool.isRequired,
    showCancelButton: _propTypes2.default.bool.isRequired,
    confirmButtonText: _propTypes2.default.string,
    cancelButtonText: _propTypes2.default.string,
    confirmButtonColor: _propTypes2.default.string,
    cancelButtonColor: _propTypes2.default.string,
    confirmButtonClass: _propTypes2.default.string,
    cancelButtonClass: _propTypes2.default.string,
    confirmButtonAriaLabel: _propTypes2.default.string,
    cancelButtonAriaLabel: _propTypes2.default.string,
    buttonsStyling: _propTypes2.default.bool.isRequired,
    reverseButtons: _propTypes2.default.bool.isRequired,
    focusConfirm: _propTypes2.default.bool.isRequired,
    focusCancel: _propTypes2.default.bool.isRequired,
    showCloseButton: _propTypes2.default.bool.isRequired,
    closeButtonAriaLabel: _propTypes2.default.string.isRequired,
    showLoaderOnConfirm: _propTypes2.default.bool.isRequired,
    preConfirm: _propTypes2.default.func,
    imageUrl: _propTypes2.default.string,
    imageWidth: _propTypes2.default.number,
    imageHeight: _propTypes2.default.number,
    imageAlt: _propTypes2.default.string,
    imageClass: _propTypes2.default.string,
    inputPlaceholder: _propTypes2.default.string,
    inputValue: _propTypes2.default.string,
    inputOptions: _propTypes2.default.object.isRequired,
    inputAutoTrim: _propTypes2.default.bool.isRequired,
    inputAttributes: _propTypes2.default.object.isRequired,
    inputValidator: _propTypes2.default.func,
    validationMessage: _propTypes2.default.string,
    inputClass: _propTypes2.default.string,
    progressSteps: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,
    currentProgressStep: _propTypes2.default.string,
    progressStepsDistance: _propTypes2.default.string,
    onBeforeOpen: _propTypes2.default.func,
    onOpen: _propTypes2.default.func,
    onClose: _propTypes2.default.func,
    onAfterClose: _propTypes2.default.func,
    onConfirm: _propTypes2.default.func,
    showLoading: _propTypes2.default.bool.isRequired
};

ReactSweetAlert2.defaultProps = {
    show: false,
    title: null,
    titleText: null,
    html: null,
    text: null,
    type: null,
    footer: null,
    backdrop: true,
    toast: false,
    target: 'body',
    input: null,
    width: null,
    padding: null,
    background: null,
    position: 'center',
    grow: false,
    customClass: null,
    timer: null,
    animation: true,
    heightAuto: true,
    allowOutsideClick: true,
    allowEscapeKey: true,
    allowEnterKey: true,
    stopKeydownPropagation: true,
    keydownListenerCapture: false,
    showConfirmButton: true,
    showCancelButton: false,
    confirmButtonText: 'OK',
    cancelButtonText: 'Cancel',
    confirmButtonColor: null,
    cancelButtonColor: null,
    confirmButtonClass: null,
    cancelButtonClass: null,
    confirmButtonAriaLabel: '',
    cancelButtonAriaLabel: '',
    buttonsStyling: true,
    reverseButtons: false,
    focusConfirm: true,
    focusCancel: false,
    showCloseButton: false,
    closeButtonAriaLabel: 'Close this dialog',
    showLoaderOnConfirm: false,
    preConfirm: null,
    imageUrl: null,
    imageWidth: null,
    imageHeight: null,
    imageAlt: '',
    imageClass: null,
    inputPlaceholder: '',
    inputValue: '',
    inputOptions: {},
    inputAutoTrim: true,
    inputAttributes: {},
    inputValidator: null,
    validationMessage: null,
    inputClass: null,
    progressSteps: [],
    currentProgressStep: null,
    progressStepsDistance: '40px',
    onBeforeOpen: null,
    onOpen: null,
    onClose: null,
    onAfterClose: null,
    onConfirm: null,
    showLoading: false
};

exports.default = ReactSweetAlert2;